ZETA ENGINE TODO LIST

- Add a font queue (like the translucent queue) to avoid flushing the renderer every single font change
- Batch some translucent sprites: (will do if becomes a problem)
	* everything with non-intersecting AABBs can be batched
- Add in some useful unit tests! The project can't just sit there for nothing.
- Use Tiled editor (https://thorbjorn.itch.io/tiled) to create an interface for making levels
- Particle engine (attractors, deflectors, physics, automatic creation of new particles, automatic deletion of dead particles etc)
- Primitive rendering
- Cameras, fullscreen, fixed aspect ratio with black bars on side
- Make a forget() method on sounds that sends a pointer to the SoundManager which will automatically
  destroy it when it is done playing so it does not need to be manually managed
- Put the texture array initialisation code (setting the uniform array { 0, 1, 2 ... }) in the shader itself
- Add a default Renderer constructor that uses a ShaderBasic
- Implement level time and level frames in GlobalData / main function
- Implement useful builtin behaviours e.g. collision
- Functions in Entity to search for a specific behaviour
- Functions in Level to:
	* get all Entities currently stored as a const std::vector<Entity*>&
	* remove an Entity
	* test for (AABB?) collisions (possibly separate this into a physics namespace)
	* switch level
	* save/load game data
- Read tile data (as opposed to object data) from Tiled (.TMX) file

POSSIBLE FUTURE ADD-ONS

- A 'path' system by using a Tiled polyline on an object layer, where entities can move along a path
- Stereo sound